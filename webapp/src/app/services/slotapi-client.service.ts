//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import {
  mergeMap as _observableMergeMap,
  catchError as _observableCatch,
} from 'rxjs/operators';
import {
  Observable,
  throwError as _observableThrow,
  of as _observableOf,
} from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpResponse,
  HttpResponseBase,
} from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface ISlotApiClient {
  /**
   * @param year (optional)
   * @param week (optional)
   * @return OK
   */
  getWeeklySlots(
    year?: number | undefined,
    week?: number | undefined
  ): Observable<WeeklySlotsResponse>;
  /**
   * @param body (optional)
   * @return Created
   */
  bookSlot(
    startDate: Date,
    body?: BookSlotRequest | undefined
  ): Observable<WeeklySlotsResponse>;
}

@Injectable({
  providedIn: 'root',
})
export class SlotApiClient implements ISlotApiClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl ?? '';
  }

  /**
   * @param year (optional)
   * @param week (optional)
   * @return OK
   */
  getWeeklySlots(
    year?: number | undefined,
    week?: number | undefined
  ): Observable<WeeklySlotsResponse> {
    let url_ = this.baseUrl + '/Slot?';
    if (year === null) throw new Error("The parameter 'year' cannot be null.");
    else if (year !== undefined)
      url_ += 'year=' + encodeURIComponent('' + year) + '&';
    if (week === null) throw new Error("The parameter 'week' cannot be null.");
    else if (week !== undefined)
      url_ += 'week=' + encodeURIComponent('' + week) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetWeeklySlots(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetWeeklySlots(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<WeeklySlotsResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<WeeklySlotsResponse>;
        })
      );
  }

  protected processGetWeeklySlots(
    response: HttpResponseBase
  ): Observable<WeeklySlotsResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = WeeklySlotsResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result404: any = null;
          let resultData404 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result404 = resultData404 !== undefined ? resultData404 : <any>null;

          return throwException(
            'Not Found',
            status,
            _responseText,
            _headers,
            result404
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return Created
   */
  bookSlot(
    startDate: Date,
    body?: BookSlotRequest | undefined
  ): Observable<WeeklySlotsResponse> {
    let url_ = this.baseUrl + '/Slot/{startDate}/book';
    if (startDate === undefined || startDate === null)
      throw new Error("The parameter 'startDate' must be defined.");
    url_ = url_.replace(
      '{startDate}',
      encodeURIComponent(startDate ? '' + startDate.toISOString() : 'null')
    );
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('put', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processBookSlot(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processBookSlot(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<WeeklySlotsResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<WeeklySlotsResponse>;
        })
      );
  }

  protected processBookSlot(
    response: HttpResponseBase
  ): Observable<WeeklySlotsResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 201) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result201: any = null;
          let resultData201 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result201 = WeeklySlotsResponse.fromJS(resultData201);
          return _observableOf(result201);
        })
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result404: any = null;
          let resultData404 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result404 = resultData404 !== undefined ? resultData404 : <any>null;

          return throwException(
            'Not Found',
            status,
            _responseText,
            _headers,
            result404
          );
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = resultData400 !== undefined ? resultData400 : <any>null;

          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status === 409) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result409: any = null;
          let resultData409 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result409 = resultData409 !== undefined ? resultData409 : <any>null;

          return throwException(
            'Conflict',
            status,
            _responseText,
            _headers,
            result409
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }
}

export class BookSlotRequest implements IBookSlotRequest {
  comments?: string | undefined;
  patient!: PatientRequest;
  start!: Date;

  constructor(data?: IBookSlotRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
    if (!data) {
      this.patient = new PatientRequest();
    }
  }

  init(_data?: any) {
    if (_data) {
      this.comments = _data['comments'];
      this.patient = _data['patient']
        ? PatientRequest.fromJS(_data['patient'])
        : new PatientRequest();
      this.start = _data['start']
        ? new Date(_data['start'].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any): BookSlotRequest {
    data = typeof data === 'object' ? data : {};
    let result = new BookSlotRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['comments'] = this.comments;
    data['patient'] = this.patient ? this.patient.toJSON() : <any>undefined;
    data['start'] = this.start ? this.start.toISOString() : <any>undefined;
    return data;
  }
}

export interface IBookSlotRequest {
  comments?: string | undefined;
  patient: PatientRequest;
  start: Date;
}

export class DailySlotsResponse implements IDailySlotsResponse {
  date?: Date;
  dayOfWeek?: string | undefined;
  slots?: SlotResponse[] | undefined;
  workPeriod?: WorkPeriodResponse;

  constructor(data?: IDailySlotsResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.date = _data['date']
        ? new Date(_data['date'].toString())
        : <any>undefined;
      this.dayOfWeek = _data['dayOfWeek'];
      if (Array.isArray(_data['slots'])) {
        this.slots = [] as any;
        for (let item of _data['slots'])
          this.slots!.push(SlotResponse.fromJS(item));
      }
      this.workPeriod = _data['workPeriod']
        ? WorkPeriodResponse.fromJS(_data['workPeriod'])
        : <any>undefined;
    }
  }

  static fromJS(data: any): DailySlotsResponse {
    data = typeof data === 'object' ? data : {};
    let result = new DailySlotsResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['date'] = this.date ? formatDate(this.date) : <any>undefined;
    data['dayOfWeek'] = this.dayOfWeek;
    if (Array.isArray(this.slots)) {
      data['slots'] = [];
      for (let item of this.slots) data['slots'].push(item.toJSON());
    }
    data['workPeriod'] = this.workPeriod
      ? this.workPeriod.toJSON()
      : <any>undefined;
    return data;
  }
}

export interface IDailySlotsResponse {
  date?: Date;
  dayOfWeek?: string | undefined;
  slots?: SlotResponse[] | undefined;
  workPeriod?: WorkPeriodResponse;
}

export class FacilityResponse implements IFacilityResponse {
  address?: string | undefined;
  facilityId?: string;
  name?: string | undefined;

  constructor(data?: IFacilityResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.address = _data['address'];
      this.facilityId = _data['facilityId'];
      this.name = _data['name'];
    }
  }

  static fromJS(data: any): FacilityResponse {
    data = typeof data === 'object' ? data : {};
    let result = new FacilityResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['address'] = this.address;
    data['facilityId'] = this.facilityId;
    data['name'] = this.name;
    return data;
  }
}

export interface IFacilityResponse {
  address?: string | undefined;
  facilityId?: string;
  name?: string | undefined;
}

export class PatientRequest implements IPatientRequest {
  email?: string | undefined;
  name!: string;
  phone!: string;
  secondName?: string | undefined;

  constructor(data?: IPatientRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.email = _data['email'];
      this.name = _data['name'];
      this.phone = _data['phone'];
      this.secondName = _data['secondName'];
    }
  }

  static fromJS(data: any): PatientRequest {
    data = typeof data === 'object' ? data : {};
    let result = new PatientRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['email'] = this.email;
    data['name'] = this.name;
    data['phone'] = this.phone;
    data['secondName'] = this.secondName;
    return data;
  }
}

export interface IPatientRequest {
  email?: string | undefined;
  name: string;
  phone: string;
  secondName?: string | undefined;
}

export class SlotResponse implements ISlotResponse {
  busy?: boolean;
  empty?: boolean;
  end?: Date;
  start?: Date;

  constructor(data?: ISlotResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.busy = _data['busy'];
      this.empty = _data['empty'];
      this.end = _data['end']
        ? new Date(_data['end'].toString())
        : <any>undefined;
      this.start = _data['start']
        ? new Date(_data['start'].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any): SlotResponse {
    data = typeof data === 'object' ? data : {};
    let result = new SlotResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['busy'] = this.busy;
    data['empty'] = this.empty;
    data['end'] = this.end ? this.end.toISOString() : <any>undefined;
    data['start'] = this.start ? this.start.toISOString() : <any>undefined;
    return data;
  }
}

export interface ISlotResponse {
  busy?: boolean;
  empty?: boolean;
  end?: Date;
  start?: Date;
}

export class WeeklySlotsResponse implements IWeeklySlotsResponse {
  days?: DailySlotsResponse[] | undefined;
  facility?: FacilityResponse;
  slotDurationMinutes?: number;

  constructor(data?: IWeeklySlotsResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data['days'])) {
        this.days = [] as any;
        for (let item of _data['days'])
          this.days!.push(DailySlotsResponse.fromJS(item));
      }
      this.facility = _data['facility']
        ? FacilityResponse.fromJS(_data['facility'])
        : <any>undefined;
      this.slotDurationMinutes = _data['slotDurationMinutes'];
    }
  }

  static fromJS(data: any): WeeklySlotsResponse {
    data = typeof data === 'object' ? data : {};
    let result = new WeeklySlotsResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.days)) {
      data['days'] = [];
      for (let item of this.days) data['days'].push(item.toJSON());
    }
    data['facility'] = this.facility ? this.facility.toJSON() : <any>undefined;
    data['slotDurationMinutes'] = this.slotDurationMinutes;
    return data;
  }
}

export interface IWeeklySlotsResponse {
  days?: DailySlotsResponse[] | undefined;
  facility?: FacilityResponse;
  slotDurationMinutes?: number;
}

export class WorkPeriodResponse implements IWorkPeriodResponse {
  endHour?: number;
  lunchEndHour?: number;
  lunchStartHour?: number;
  startHour?: number;

  constructor(data?: IWorkPeriodResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.endHour = _data['endHour'];
      this.lunchEndHour = _data['lunchEndHour'];
      this.lunchStartHour = _data['lunchStartHour'];
      this.startHour = _data['startHour'];
    }
  }

  static fromJS(data: any): WorkPeriodResponse {
    data = typeof data === 'object' ? data : {};
    let result = new WorkPeriodResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['endHour'] = this.endHour;
    data['lunchEndHour'] = this.lunchEndHour;
    data['lunchStartHour'] = this.lunchStartHour;
    data['startHour'] = this.startHour;
    return data;
  }
}

export interface IWorkPeriodResponse {
  endHour?: number;
  lunchEndHour?: number;
  lunchStartHour?: number;
  startHour?: number;
}

function formatDate(d: Date) {
  return (
    d.getFullYear() +
    '-' +
    (d.getMonth() < 9 ? '0' + (d.getMonth() + 1) : d.getMonth() + 1) +
    '-' +
    (d.getDate() < 10 ? '0' + d.getDate() : d.getDate())
  );
}

export class ApiException extends Error {
  override message: string;
  status: number;
  response: string;
  headers: { [key: string]: any };
  result: any;

  constructor(
    message: string,
    status: number,
    response: string,
    headers: { [key: string]: any },
    result: any
  ) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(
  message: string,
  status: number,
  response: string,
  headers: { [key: string]: any },
  result?: any
): Observable<any> {
  if (result !== null && result !== undefined) return _observableThrow(result);
  else
    return _observableThrow(
      new ApiException(message, status, response, headers, null)
    );
}

function blobToText(blob: any): Observable<string> {
  return new Observable<string>((observer: any) => {
    if (!blob) {
      observer.next('');
      observer.complete();
    } else {
      let reader = new FileReader();
      reader.onload = (event) => {
        observer.next((event.target as any).result);
        observer.complete();
      };
      reader.readAsText(blob);
    }
  });
}
