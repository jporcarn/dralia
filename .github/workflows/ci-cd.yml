permissions:
  contents: write
  issues: write
  pull-requests: write

name: CI/CD

on:
  push:
    branches:
      - main

jobs:
  # CI Job: Build and Test
  ci:
    runs-on: ubuntu-latest
    name: Build and Test

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all tags

      # Setup .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      # Restore dependencies
      - name: Restore dependencies
        run: dotnet restore ./src/Docplanner.Api.sln

      # Build the project
      - name: Build
        run: dotnet build ./src/Docplanner.Api.sln --no-restore --configuration Release

      # Run Unit Tests
      - name: Run All Unit Tests
        run: dotnet test ./src/Docplanner.Api.sln --configuration Release --no-build --filter FullyQualifiedName~"*Tests.Unit" --verbosity normal

      # Run Integration Tests
      - name: Run All Integration Tests
        run: dotnet test ./src/Docplanner.Api.sln --configuration Release --no-build --filter FullyQualifiedName~"*Tests.Integration" --verbosity normal
        env:
          AVAILABILITYAPI__CREDENTIALS__PASSWORD: ${{ secrets.AVAILABILITYAPI__CREDENTIALS__PASSWORD }}
          AVAILABILITYAPI__CREDENTIALS__USERNAME: ${{ secrets.AVAILABILITYAPI__CREDENTIALS__USERNAME }}

  # Tagging Job: Create a new tag
  tag:
    runs-on: ubuntu-latest
    name: Create Tag
    needs: ci # This job depends on the CI job

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all tags

      # Get recommended bump using standard-version
      - name: Get recommended bump using standard-version
        id: get_bump
        run: |
          npm install --global standard-version
          BUMP=$(standard-version --dry-run | grep "bump:" | sed -E 's/.*bump: ([a-z]+).*/\1/')
          if [ -z "$BUMP" ]; then
            echo "⚠️  No bump detected, using patch as default"
            BUMP="patch"
          fi
          echo "bump=$BUMP" >> $GITHUB_OUTPUT

      # Create new tag
      - name: Create new tag
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: ${{ steps.get_bump.outputs.bump }}
          tag_prefix: v

      # Get the latest tag
      - name: Get latest tag
        id: get_latest_tag
        run: |
          LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "service_version=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Service version: $LATEST_TAG"

    outputs:
      service_version: ${{ steps.get_latest_tag.outputs.service_version }}

  # Terraform Job: Deploy Infrastructure
  deploy-infra:
    runs-on: ubuntu-latest
    name: Deploy Infrastructure
    needs: tag

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all tags

      - name: Debug service_version
        run: |
          echo "Service version: ${{ needs.tag.outputs.service_version }}"

      - name: Checkout latest tag
        run: git checkout ${{ needs.tag.outputs.service_version }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Set Terraform Environment Variables
        run: |
          echo "TF_VAR_service_version=${{ secrets.SERVICE_VERSION }}" >> $GITHUB_ENV
          echo "TF_VAR_credentials_username=${{ secrets.AVAILABILITYAPI__CREDENTIALS__USERNAME }}" >> $GITHUB_ENV
          echo "TF_VAR_credentials_password=${{ secrets.AVAILABILITYAPI__CREDENTIALS__PASSWORD }}" >> $GITHUB_ENV

      - name: Export Azure Authentication Environment Variables
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}" >> $GITHUB_ENV

      - name: Terraform Init
        run: terraform init
        working-directory: ./infra

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./infra

  # Deploy API Job
  deploy-api:
    runs-on: ubuntu-latest
    name: Deploy API
    needs: [tag, deploy-infra] # Run after the infrastructure deployment

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug service_version
        run: |
          echo "Service version: ${{ needs.tag.outputs.service_version }}"

      - name: Checkout latest tag
        run: git checkout ${{ needs.tag.outputs.service_version }}

      - name: Publish API
        run: dotnet publish ./src/Docplanner.Api/Docplanner.Api.csproj --configuration Release --output ./publish

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: dralia-api-app
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ./publish

  # Deploy SPA Job
  deploy-spa:
    runs-on: ubuntu-latest
    name: Deploy Angular SPA
    needs: [tag, deploy-infra] # Run after the infrastructure deployment

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug service_version
        run: |
          echo "Service version: ${{ needs.tag.outputs.service_version }}"

      - name: Checkout latest tag
        run: git checkout ${{ needs.tag.outputs.service_version }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install dependencies
        working-directory: ./webapp
        run: npm ci

      - name: Build Angular App
        working-directory: ./webapp
        run: npm run build -- --configuration=production

      - name: Deploy to Azure Static Web App
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          action: "upload"
          app_location: "webapp/dist/webapp"
          output_location: "" # no additional output folder
